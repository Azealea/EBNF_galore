program =
    exp
  | chunks
  ;


exps = [ exp { ";" exp } ] ;
exp =
    "nil"
  | integer
  | string
  | type_id + "[" + exp +  "]" "of" exp
  | type_id "{" [ id "=" exp { "," id "=" exp } ] "}"
  | lvalue
  | id "(" [ exp { "," exp }] ")"
      | "-" exp
      | exp op exp
      | "(" exps ")"
      | lvalue ":=" exp
      | "if" exp "then" exp ["else" exp]
      | "while" exp "do" "\n" exp "\n"
      | "for" id ":=" exp "to" exp "do" "\n" exp "\n"
      | "break" "\n"
      | "let" "\n" chunks "in" "\n" exps "end" "\n"
      ;

    lvalue =
        id
      | lvalue  + "." +  id
      | lvalue + "[" +  exp +  "]"
      ;

    op = "+" | "-" | "*" | "/" | "=" | "<>" | ">" | "<" | ">=" | "<=" | "&" | "|" ;


    chunks = { chunk "\n" };
    chunk =
        { tydec }
      | fundec
      | vardec

  | "import" string "\n"
  ;

vardec = "var" id [ ":" type_id ] ":=" exp ;

tydec = "type" id "=" ty  ;

fundec =
    "function" id "(" tyfields ")" [ ":" type_id ] "=" exp
  | "primitive" id "(" tyfields ")" [ ":" type_id ]
  ;


ty =
     type_id
   | "{" tyfields  "}"
   | "array" "of" type_id
   ;

tyfields = [ id ":" type_id { "," id ":" type_id } ] ;
type_id = id ;

integer = "1" | "0" | "4" | "69" | "-1" ;
string = '"hello hihihihi"';
id= "foo" | "bar" | "count" | "ur_mama" ;

